/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author rafai
 */

import java.io.*;
import java.util.*;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.IOException;

public class gymManagementSystem extends javax.swing.JFrame {

    /**
     * Creates new form gymManagementSystem
     */
    
    ArrayList<Member> memList;
    ArrayList<Employee> empList;
    ArrayList<Equipment> equipList;
    ArrayList<FitnessClasses> fitClassList;
    ArrayList<MemberClass> classList;
    JTextArea area;
    
    boolean valid;
    String searchName;
    int age, phone, classCapacity;
    double memPrice, equipmentSize, price, duration;
    char gender;
    int noOfClasses;
    boolean found = false;

    public gymManagementSystem() {
        initComponents();
        
        memList = new ArrayList<Member>();
        empList = new ArrayList<Employee>();
        equipList = new ArrayList<Equipment>();
        fitClassList = new ArrayList<FitnessClasses>();
        classList = new ArrayList<MemberClass>();
        area = new JTextArea();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        fileMenuItemLAD = new javax.swing.JMenuItem();
        fileMenuItemSAD = new javax.swing.JMenuItem();
        fileSep = new javax.swing.JPopupMenu.Separator();
        fileExit = new javax.swing.JMenuItem();
        memMenu = new javax.swing.JMenu();
        memMenuItemAdd = new javax.swing.JMenuItem();
        memMenuItemRemove = new javax.swing.JMenuItem();
        memMenuItemDispAll = new javax.swing.JMenuItem();
        memMenuItemSearch = new javax.swing.JMenuItem();
        memMenuItemSort = new javax.swing.JMenuItem();
        memSep = new javax.swing.JPopupMenu.Separator();
        memExit = new javax.swing.JMenuItem();
        empMenu = new javax.swing.JMenu();
        empMenuItemAdd = new javax.swing.JMenuItem();
        empMenuItemRemove = new javax.swing.JMenuItem();
        empMenuItemDispAll = new javax.swing.JMenuItem();
        empMenuItemSearch = new javax.swing.JMenuItem();
        empMenuItemSort = new javax.swing.JMenuItem();
        empSep = new javax.swing.JPopupMenu.Separator();
        empExit = new javax.swing.JMenuItem();
        equipMenu = new javax.swing.JMenu();
        equipMenuItemAdd = new javax.swing.JMenuItem();
        equipMenuItemRemove = new javax.swing.JMenuItem();
        equipMenuItemDispAll = new javax.swing.JMenuItem();
        EquipMenuItemSearch = new javax.swing.JMenuItem();
        equipSort = new javax.swing.JPopupMenu.Separator();
        equipExit = new javax.swing.JMenuItem();
        fcMenu = new javax.swing.JMenu();
        fcMenuItemAdd = new javax.swing.JMenuItem();
        fcMenuItemRemove = new javax.swing.JMenuItem();
        fcMenuItemDispAll = new javax.swing.JMenuItem();
        fcMenuItemSearch = new javax.swing.JMenuItem();
        fcSep = new javax.swing.JPopupMenu.Separator();
        fcExit = new javax.swing.JMenuItem();
        classMenu = new javax.swing.JMenu();
        classMenuItemAdd = new javax.swing.JMenuItem();
        classMenuItemDispAll = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Fitness Fanatics");

        jMenuBar1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        fileMenu.setText("File   ");
        fileMenu.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        fileMenu.setOpaque(true);

        fileMenuItemLAD.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        fileMenuItemLAD.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        fileMenuItemLAD.setText("Load All Data     ");
        fileMenuItemLAD.setIconTextGap(0);
        fileMenuItemLAD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileMenuItemLADActionPerformed(evt);
            }
        });
        fileMenu.add(fileMenuItemLAD);

        fileMenuItemSAD.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        fileMenuItemSAD.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        fileMenuItemSAD.setText("Save All Data     ");
        fileMenuItemSAD.setIconTextGap(0);
        fileMenuItemSAD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileMenuItemSADActionPerformed(evt);
            }
        });
        fileMenu.add(fileMenuItemSAD);
        fileMenu.add(fileSep);

        fileExit.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        fileExit.setText("Exit");
        fileExit.setIconTextGap(0);
        fileExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileExitActionPerformed(evt);
            }
        });
        fileMenu.add(fileExit);

        jMenuBar1.add(fileMenu);

        memMenu.setText("Member   ");
        memMenu.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        memMenu.setOpaque(true);

        memMenuItemAdd.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        memMenuItemAdd.setText("Add a New Member");
        memMenuItemAdd.setIconTextGap(0);
        memMenuItemAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                memMenuItemAddActionPerformed(evt);
            }
        });
        memMenu.add(memMenuItemAdd);

        memMenuItemRemove.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        memMenuItemRemove.setText("Remove Member");
        memMenuItemRemove.setIconTextGap(0);
        memMenuItemRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                memMenuItemRemoveActionPerformed(evt);
            }
        });
        memMenu.add(memMenuItemRemove);

        memMenuItemDispAll.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        memMenuItemDispAll.setText("Display All Members");
        memMenuItemDispAll.setIconTextGap(0);
        memMenuItemDispAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                memMenuItemDispAllActionPerformed(evt);
            }
        });
        memMenu.add(memMenuItemDispAll);

        memMenuItemSearch.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        memMenuItemSearch.setText("Search a Member");
        memMenuItemSearch.setIconTextGap(0);
        memMenuItemSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                memMenuItemSearchActionPerformed(evt);
            }
        });
        memMenu.add(memMenuItemSearch);

        memMenuItemSort.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        memMenuItemSort.setText("Sort Members by Name");
        memMenuItemSort.setIconTextGap(0);
        memMenuItemSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                memMenuItemSortActionPerformed(evt);
            }
        });
        memMenu.add(memMenuItemSort);
        memMenu.add(memSep);

        memExit.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        memExit.setText("Exit");
        memExit.setIconTextGap(0);
        memExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                memExitActionPerformed(evt);
            }
        });
        memMenu.add(memExit);

        jMenuBar1.add(memMenu);

        empMenu.setText("Employee   ");
        empMenu.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        empMenu.setOpaque(true);

        empMenuItemAdd.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        empMenuItemAdd.setText("Add a New Employee");
        empMenuItemAdd.setIconTextGap(0);
        empMenuItemAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                empMenuItemAddActionPerformed(evt);
            }
        });
        empMenu.add(empMenuItemAdd);

        empMenuItemRemove.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        empMenuItemRemove.setText("Remove an Employee");
        empMenuItemRemove.setIconTextGap(0);
        empMenuItemRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                empMenuItemRemoveActionPerformed(evt);
            }
        });
        empMenu.add(empMenuItemRemove);

        empMenuItemDispAll.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        empMenuItemDispAll.setText("Display All Employees");
        empMenuItemDispAll.setIconTextGap(0);
        empMenuItemDispAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                empMenuItemDispAllActionPerformed(evt);
            }
        });
        empMenu.add(empMenuItemDispAll);

        empMenuItemSearch.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        empMenuItemSearch.setText("Search an Employee");
        empMenuItemSearch.setIconTextGap(0);
        empMenuItemSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                empMenuItemSearchActionPerformed(evt);
            }
        });
        empMenu.add(empMenuItemSearch);

        empMenuItemSort.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        empMenuItemSort.setText("Sort Employee by Name");
        empMenuItemSort.setIconTextGap(0);
        empMenuItemSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                empMenuItemSortActionPerformed(evt);
            }
        });
        empMenu.add(empMenuItemSort);
        empMenu.add(empSep);

        empExit.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        empExit.setText("Exit");
        empExit.setIconTextGap(0);
        empExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                empExitActionPerformed(evt);
            }
        });
        empMenu.add(empExit);

        jMenuBar1.add(empMenu);

        equipMenu.setText("Equipment   ");
        equipMenu.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        equipMenu.setOpaque(true);

        equipMenuItemAdd.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        equipMenuItemAdd.setText("Add New Equipment");
        equipMenuItemAdd.setIconTextGap(0);
        equipMenuItemAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                equipMenuItemAddActionPerformed(evt);
            }
        });
        equipMenu.add(equipMenuItemAdd);

        equipMenuItemRemove.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        equipMenuItemRemove.setText("Remove An Equipment");
        equipMenuItemRemove.setIconTextGap(0);
        equipMenuItemRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                equipMenuItemRemoveActionPerformed(evt);
            }
        });
        equipMenu.add(equipMenuItemRemove);

        equipMenuItemDispAll.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        equipMenuItemDispAll.setText("Display All equipments");
        equipMenuItemDispAll.setIconTextGap(0);
        equipMenuItemDispAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                equipMenuItemDispAllActionPerformed(evt);
            }
        });
        equipMenu.add(equipMenuItemDispAll);

        EquipMenuItemSearch.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        EquipMenuItemSearch.setText("Search Equipment");
        EquipMenuItemSearch.setIconTextGap(0);
        EquipMenuItemSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EquipMenuItemSearchActionPerformed(evt);
            }
        });
        equipMenu.add(EquipMenuItemSearch);
        equipMenu.add(equipSort);

        equipExit.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        equipExit.setText("Exit");
        equipExit.setIconTextGap(0);
        equipExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                equipExitActionPerformed(evt);
            }
        });
        equipMenu.add(equipExit);

        jMenuBar1.add(equipMenu);

        fcMenu.setText("Fitness Class   ");
        fcMenu.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        fcMenu.setOpaque(true);

        fcMenuItemAdd.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        fcMenuItemAdd.setText("Add a New Class");
        fcMenuItemAdd.setIconTextGap(0);
        fcMenuItemAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fcMenuItemAddActionPerformed(evt);
            }
        });
        fcMenu.add(fcMenuItemAdd);

        fcMenuItemRemove.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        fcMenuItemRemove.setText("Remove a Fitness Class");
        fcMenuItemRemove.setIconTextGap(0);
        fcMenuItemRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fcMenuItemRemoveActionPerformed(evt);
            }
        });
        fcMenu.add(fcMenuItemRemove);

        fcMenuItemDispAll.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        fcMenuItemDispAll.setText("Display All Classes");
        fcMenuItemDispAll.setIconTextGap(0);
        fcMenuItemDispAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fcMenuItemDispAllActionPerformed(evt);
            }
        });
        fcMenu.add(fcMenuItemDispAll);

        fcMenuItemSearch.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        fcMenuItemSearch.setText("Search a Class");
        fcMenuItemSearch.setIconTextGap(0);
        fcMenuItemSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fcMenuItemSearchActionPerformed(evt);
            }
        });
        fcMenu.add(fcMenuItemSearch);
        fcMenu.add(fcSep);

        fcExit.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        fcExit.setText("Exit");
        fcExit.setIconTextGap(0);
        fcExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fcExitActionPerformed(evt);
            }
        });
        fcMenu.add(fcExit);

        jMenuBar1.add(fcMenu);

        classMenu.setText("Class   ");
        classMenu.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        classMenu.setOpaque(true);

        classMenuItemAdd.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        classMenuItemAdd.setText("Add a Member To Class");
        classMenuItemAdd.setIconTextGap(0);
        classMenuItemAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classMenuItemAddActionPerformed(evt);
            }
        });
        classMenu.add(classMenuItemAdd);

        classMenuItemDispAll.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        classMenuItemDispAll.setText("Display All Class Members");
        classMenuItemDispAll.setIconTextGap(0);
        classMenuItemDispAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classMenuItemDispAllActionPerformed(evt);
            }
        });
        classMenu.add(classMenuItemDispAll);

        jMenuBar1.add(classMenu);

        jMenu1.setText("Finance");
        jMenu1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jMenu1.setOpaque(true);

        jMenuItem1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jMenuItem1.setText("Membership fees");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 463, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 274, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void memMenuItemDispAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_memMenuItemDispAllActionPerformed
        // TODO add your handling code here:
        area.setText("Member List\n");
        // adding scrollbar
        JScrollPane scroll = new JScrollPane(area, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, 
        JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        for (Member m : memList) {
            area.append(m.toString() + "\n");
        }
        // setting scrollbar dimension
        scroll.setPreferredSize(new Dimension(500, 500));
        JOptionPane.showMessageDialog(null, scroll);
    }//GEN-LAST:event_memMenuItemDispAllActionPerformed

    private void memMenuItemSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_memMenuItemSearchActionPerformed
        // TODO add your handling code here:
         searchName = JOptionPane.showInputDialog("Please enter the members name that you are looking for: \n");
        for (int i = 0; i < memList.size(); i++) {
            if (searchName.equals(memList.get(i).getName())) {
                System.out.println("Found!" + memList.get(i).getName());
                found = true;
                System.out.println("Details: " + "Member ID: " + memList.get(i).getMemberID() + "\nMember's Name: " + memList.get(i).getName() + "\nMember's Age: " + memList.get(i).getAge() + "\nMember's Gender: " + memList.get(i).getGender()
                        + "\nMember's Address: " + memList.get(i).getMemberAddress() + "\nMember's Phone Number: " + memList.get(i).getMemberPhoneNo() + "\nMember's Email Address: " + memList.get(i).getMemberEmail() + "\nMembership Type: " + memList.get(i).getMemberType()
                        + "\nMembership Price: " + memList.get(i).getMembershipPrice() + "\nMembership Start Date: " + memList.get(i).getStartDate() + "\nMembership Finish Date: " + memList.get(i).getFinishDate());
            }
        }
        if (!found) {
            System.out.printf(searchName + " is not in your list of Members");
        }
    }//GEN-LAST:event_memMenuItemSearchActionPerformed

    private void fileMenuItemLADActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileMenuItemLADActionPerformed
        // TODO add your handling code here:
        try {
            ObjectInputStream is = new ObjectInputStream(new FileInputStream("gymSystem.data"));
            memList = (ArrayList<Member>) is.readObject();
            empList = (ArrayList<Employee>) is.readObject();
            equipList = (ArrayList<Equipment>) is.readObject();
            fitClassList = (ArrayList<FitnessClasses>) is.readObject();
            classList = (ArrayList<MemberClass>) is.readObject();
            is.close();
            JOptionPane.showMessageDialog(null, "Data loaded");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Load Aborted");
            e.printStackTrace();
        }
    }//GEN-LAST:event_fileMenuItemLADActionPerformed

    private void fileMenuItemSADActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileMenuItemSADActionPerformed
        // TODO add your handling code here:
        try {
            ObjectOutputStream os = new ObjectOutputStream(new FileOutputStream("gymSystem.data"));
            os.writeObject(memList);
            os.writeObject(empList);
            os.writeObject(equipList);
            os.writeObject(fitClassList);
            os.writeObject(classList);
            os.close();
            JOptionPane.showMessageDialog(null, "Data Saved");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Save Aborted");
            e.printStackTrace();
        }
    }//GEN-LAST:event_fileMenuItemSADActionPerformed

    private void memMenuItemAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_memMenuItemAddActionPerformed
        // TODO add your handling code here:
         // Ask for the Member's Name
        String name = JOptionPane.showInputDialog(null, "Please enter new members name");

        do {
            valid = false;
            // Ask for Member's Age
            String ageAsString = JOptionPane.showInputDialog(null, "Please Enter Member age");

            try {

                age = Integer.parseInt(ageAsString);
                valid = true;
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "'" + ageAsString + "' is invalid\n"
                        + "Please enter digits only");
            } // end catch
        } while (!valid);
        // Ask for Member's gender
        gender = JOptionPane.showInputDialog(null, "Enter gender:").charAt(0);

        String address = JOptionPane.showInputDialog(null, "Please Enter Members address");

        do {
            valid = false;
            // Ask for Member's Phone Number
            String phoneNoAsString = JOptionPane.showInputDialog(null, "Please Enter Members phone number");

            try {
                phone = Integer.parseInt(phoneNoAsString);
                valid = true;
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "'" + phoneNoAsString + "' is invalid\n"
                        + "Please enter digits only");
            } // end catch

        } while (!valid);
        // Ask for Member's Email Address
        String email = JOptionPane.showInputDialog(null, "Please enter new members email address");
        // Ask for Membership Type
        String memType = JOptionPane.showInputDialog(null, "Please enter Membership Type");
        do {
            valid = false;
            // Ask for Membership Price
            String memPriceAsString = JOptionPane.showInputDialog(null, "Please enter Membership Price");
            try {
                memPrice = Double.parseDouble(memPriceAsString);
                valid = true;
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "'" + memPriceAsString + "' is invalid\n"
                        + "Please enter digits only");
            } // end catch
        } while (!valid);
        // Ask for Membership Start Date
        String startDate = JOptionPane.showInputDialog(null, "Please enter Membership Start Date in format dd//mm/yyyy");
        // Ask for Membership Finish Date
        String finishDate = JOptionPane.showInputDialog(null, "Please enter Membership Finish Date in format dd//mm/yyyy");

        memList.add(new Member(name, age, gender, address, phone, email, memType, memPrice, startDate, finishDate));
    }//GEN-LAST:event_memMenuItemAddActionPerformed

    private void memMenuItemRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_memMenuItemRemoveActionPerformed
        // TODO add your handling code here:
         String removeName = JOptionPane.showInputDialog(null, "Please enter the Member's name you wish to remove");
        
        for (int i = 0; i < memList.size(); i++) {
            if (removeName.equals(memList.get(i).getName())) {
                memList.remove(i);
                JOptionPane.showMessageDialog(null, removeName + " has been removed from the Members List"); 
            }
        } 
    }//GEN-LAST:event_memMenuItemRemoveActionPerformed

    private void memMenuItemSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_memMenuItemSortActionPerformed
        // TODO add your handling code here:
        Set<Member> sortMember = new TreeSet<Member>(new CompareNames());
        sortMember.addAll(memList);
        System.out.println("\nSorted by name\n" + sortMember);
    }//GEN-LAST:event_memMenuItemSortActionPerformed

    private void empMenuItemAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_empMenuItemAddActionPerformed
        // TODO add your handling code here:
        String name = JOptionPane.showInputDialog(null, "Please enter new employees name");

        do {
            valid = false;
            String ageAsString = JOptionPane.showInputDialog(null, "Please Enter Employees age");

            try {

                age = Integer.parseInt(ageAsString);
                valid = true;
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "'" + ageAsString + "' is invalid\n"
                        + "Please enter digits only");
            } // end catch
        } while (!valid);

        gender = JOptionPane.showInputDialog(null, "Enter gender:").charAt(0);

        String Address = JOptionPane.showInputDialog(null, "Please Enter Employees address");

        do {
            valid = false;
            String phoneNoAsString = JOptionPane.showInputDialog(null, "Please Enter Employees phone number");

            try {
                phone = Integer.parseInt(phoneNoAsString);
                valid = true;
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "'" + phoneNoAsString + "' is invalid\n"
                        + "Please enter digits only");
            } // end catch

        } while (!valid);

        empList.add(new Employee(name, age, gender, Address, phone));
    }//GEN-LAST:event_empMenuItemAddActionPerformed

    private void empMenuItemRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_empMenuItemRemoveActionPerformed
        // TODO add your handling code here:
        String removeName = JOptionPane.showInputDialog(null, "Please enter employees name you wish to remove");
        
        for (int i = 0; i < empList.size(); i++) {
            if (removeName.equals(empList.get(i).getName())) {
                empList.remove(i);
                JOptionPane.showMessageDialog(null, removeName + " has been removed from the Employees List");
            }
        }
    }//GEN-LAST:event_empMenuItemRemoveActionPerformed

    private void empMenuItemDispAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_empMenuItemDispAllActionPerformed
        // TODO add your handling code here:
         area.setText("Employee List\n");
        // adding scrollbar
        JScrollPane scroll = new JScrollPane(area, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, 
        JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        for (Employee e : empList) {
            area.append(e.toString() + "\n");
        }
        
        // setting scrollbar dimension
        scroll.setPreferredSize(new Dimension(500, 500));
        JOptionPane.showMessageDialog(null, scroll);
    }//GEN-LAST:event_empMenuItemDispAllActionPerformed

    private void empMenuItemSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_empMenuItemSearchActionPerformed
        // TODO add your handling code here:
        searchName = JOptionPane.showInputDialog("Please enter the employees name that you are looking for: \n");
        for (int i = 0; i < empList.size(); i++) {
            if (searchName.equals(empList.get(i).getName())) {
                System.out.println("Found!" + empList.get(i).getName());
                found = true;
                System.out.println("Details: " + "Employee ID: "
                        + empList.get(i).getEmployeeID() + "\nEmployee's Name: "
                        + empList.get(i).getName() + "\nEmployee's Age: "
                        + empList.get(i).getAge() + "\nEmployee's Gender: "
                        + empList.get(i).getGender()
                        + "\nEmployee's Address: "
                        + empList.get(i).getEmployeeAddress()
                        + "\nEmployee's Phone Number: "
                        + empList.get(i).getEmployeePhoneNo());
            }
        }
    }//GEN-LAST:event_empMenuItemSearchActionPerformed

    private void empMenuItemSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_empMenuItemSortActionPerformed
        // TODO add your handling code here:
        Set<Employee> sortEmployee = new TreeSet<Employee>(new CompareNames());
        sortEmployee.addAll(empList);
        System.out.println("\nSorted by name\n" + sortEmployee);
    }//GEN-LAST:event_empMenuItemSortActionPerformed

    private void fcMenuItemAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fcMenuItemAddActionPerformed
        // TODO add your handling code here:
        String className = JOptionPane.showInputDialog(null, "Please enter new fitness class name");
        String activity = JOptionPane.showInputDialog(null, "Please enter activity");

        do {
            valid = false;
            String classCapacityAsString = JOptionPane.showInputDialog(null, "Please enter class capacity");

            try {

                classCapacity = (int) Integer.parseInt(classCapacityAsString);
                valid = true;
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "'" + classCapacityAsString + "' is invalid\n"
                        + "Please enter digits only");
            } // end catch
        } while (!valid);

        do {
            valid = false;
            String priceAsString = JOptionPane.showInputDialog(null, "Please enter class price");

            try {

                price = (double) Double.parseDouble(priceAsString);
                valid = true;
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "'" + priceAsString + "' is invalid\n"
                        + "Please enter digits only");
            } // end catch
        } while (!valid);
        do {
            valid = false;
            String durationAsString = JOptionPane.showInputDialog(null, "Please enter class duration");

            try {

                duration = (double) Double.parseDouble(durationAsString);
                valid = true;
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "'" + durationAsString + "' is invalid\n"
                        + "Please enter digits only");
            } // end catch
        } while (!valid);

        do {
            valid = false;
            String numberOfClassesAsString = JOptionPane.showInputDialog(null, "Please enter number of classes");

            try {

                noOfClasses = (int) Integer.parseInt(numberOfClassesAsString);
                valid = true;
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "'" + numberOfClassesAsString + "' is invalid\n"
                        + "Please enter digits only");
            } // end catch
        } while (!valid);

        fitClassList.add(new FitnessClasses(className, activity, classCapacity, price, duration, noOfClasses));
    }//GEN-LAST:event_fcMenuItemAddActionPerformed

    private void fcMenuItemRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fcMenuItemRemoveActionPerformed
        // TODO add your handling code here:
          String removeClass = JOptionPane.showInputDialog(null, "Please enter the Class name you wish to remove");
        
        for (int i = 0; i < fitClassList.size(); i++) {
            if (removeClass.equals(fitClassList.get(i).getClassName())) {
                fitClassList.remove(i);
                JOptionPane.showMessageDialog(null, removeClass + " has been removed from the Class List");
            }
        }
    }//GEN-LAST:event_fcMenuItemRemoveActionPerformed

    private void fcMenuItemDispAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fcMenuItemDispAllActionPerformed
        // TODO add your handling code here:
          area.setText("Fitness Classes List\n");
        // adding scrollbar
        JScrollPane scroll = new JScrollPane(area, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, 
        JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        for (FitnessClasses c : fitClassList) {
            area.append(c.toString() + "\n");
        }
        
        // setting scrollbar dimension
        scroll.setPreferredSize(new Dimension(500, 500));
        JOptionPane.showMessageDialog(null, scroll);
    }//GEN-LAST:event_fcMenuItemDispAllActionPerformed

    private void fcMenuItemSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fcMenuItemSearchActionPerformed
        // TODO add your handling code here:
         searchName = JOptionPane.showInputDialog("Please enter the class name that you are looking for: \n");
        for (int i = 0; i < fitClassList.size(); i++) {
            if (searchName.equals(fitClassList.get(i).getClassName())) {
                System.out.println("Found!" + fitClassList.get(i).getClassName());
                found = true;
                System.out.println("Details: " + "Class Name: " + fitClassList.get(i).getClassName() + "\nClass Capacity: " + fitClassList.get(i).getClassCapacity() + "\nClass Places Taken: " + fitClassList.get(i).getPlacesTaken()
                        + "\nClass Activity: " + fitClassList.get(i).getActivity() + "\nClass Price: " + fitClassList.get(i).getPrice() + "\nClass Duration: " + fitClassList.get(i).getDuration() + "\nNumber of Classes: " + fitClassList.get(i).getNumberOfClasses());
            }
        }
    }//GEN-LAST:event_fcMenuItemSearchActionPerformed

    private void classMenuItemAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classMenuItemAddActionPerformed
        // TODO add your handling code here:
         // pick a member
        int memIdx = Integer.parseInt(JOptionPane.showInputDialog("Enter a member number "
                + " between 1 and " + memList.size()));
        // pick a class
        int classIdx = Integer.parseInt(JOptionPane.showInputDialog("Enter a class number "
                + " between 1 and " + fitClassList.size()));

        // create a new rental object
        MemberClass member = new MemberClass(memList.get(memIdx - 1),
                fitClassList.get(classIdx - 1));
        fitClassList.get(classIdx - 1).takeClass();
        member.setDate("Thursday");
        member.setRate(7.50);
        // add the member to the class list
        classList.add(member);
    }//GEN-LAST:event_classMenuItemAddActionPerformed

    private void classMenuItemDispAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classMenuItemDispAllActionPerformed
        // TODO add your handling code here:
                  // note that this gives a very poor display layout
        // instead of using r.toString(), a better-organised display would be needed  
        area.setText("Class List\n");
        // adding scrollbar
        JScrollPane scroll = new JScrollPane(area, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, 
        JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        for (MemberClass r : classList) {
            area.append(r.toString());
            if (r.getMClass() instanceof GameClass) {
                area.append(" for Class Name: " + ((GameClass) (r.getMClass())).getClassName() + "\n\n");
            }
        }
        // setting scrollbar dimension
        scroll.setPreferredSize(new Dimension(500, 500));
        JOptionPane.showMessageDialog(null, scroll);
    }//GEN-LAST:event_classMenuItemDispAllActionPerformed

    private void exit(){
        System.exit(0);
    }
    
    private void fileExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileExitActionPerformed
        // TODO add your handling code here:
        exit();
    }//GEN-LAST:event_fileExitActionPerformed

    private void memExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_memExitActionPerformed
        // TODO add your handling code here:
        exit();
    }//GEN-LAST:event_memExitActionPerformed

    private void empExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_empExitActionPerformed
        // TODO add your handling code here:
        exit();
    }//GEN-LAST:event_empExitActionPerformed

    private void fcExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fcExitActionPerformed
        // TODO add your handling code here:
        exit();
    }//GEN-LAST:event_fcExitActionPerformed

    private void equipExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_equipExitActionPerformed
        // TODO add your handling code here:
        exit();
    }//GEN-LAST:event_equipExitActionPerformed

    private void EquipMenuItemSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EquipMenuItemSearchActionPerformed
        // TODO add your handling code here:
        searchName = JOptionPane.showInputDialog("Please enter the equipment name that you are looking for: \n");
        for (int i = 0; i < equipList.size(); i++) {
            if (searchName.equals(equipList.get(i).getEquipmentName())) {
                System.out.println("Found!" + equipList.get(i).getEquipmentName());
                found = true;
                System.out.println("Details: " + "Equipment Name: " + equipList.get(i).getEquipmentName() + "\nEquipment Description: " + equipList.get(i).getEquipmentDescription()
                    + "\nEquipment Size: " + equipList.get(i).getEquipmentSize());
            }
        }
    }//GEN-LAST:event_EquipMenuItemSearchActionPerformed

    private void equipMenuItemDispAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_equipMenuItemDispAllActionPerformed
        // TODO add your handling code here:
        area.setText("Equipment List\n");
        // adding scrollbar
        JScrollPane scroll = new JScrollPane(area, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,
            JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        for (Equipment e : equipList) {
            area.append(e.toString() + "\n");
        }

        // setting scrollbar dimension
        scroll.setPreferredSize(new Dimension(500, 500));
        JOptionPane.showMessageDialog(null, scroll);
    }//GEN-LAST:event_equipMenuItemDispAllActionPerformed

    private void equipMenuItemRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_equipMenuItemRemoveActionPerformed
        // TODO add your handling code here:
        String removeEquipment = JOptionPane.showInputDialog(null, "Please enter the Equipment you wish to remove");

        for (int i = 0; i < equipList.size(); i++) {
            if (removeEquipment.equals(equipList.get(i).getEquipmentName())) {
                equipList.remove(i);
                JOptionPane.showMessageDialog(null, removeEquipment + " has been removed from the Equipment List");
            } else {
            }
        }
    }//GEN-LAST:event_equipMenuItemRemoveActionPerformed

    private void equipMenuItemAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_equipMenuItemAddActionPerformed
        // TODO add your handling code here:
        String name = JOptionPane.showInputDialog(null, "Please enter name of new Equipment");
        String description = JOptionPane.showInputDialog(null, "Please enter a description of Equipment");

        do {
            valid = false;
            String equipmentSizeAsString = JOptionPane.showInputDialog(null, "Please Enter Equipment Size");

            try {

                equipmentSize = (double) Double.parseDouble(equipmentSizeAsString);
                valid = true;
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "'" + equipmentSizeAsString + "' is invalid\n"
                    + "Please enter digits only");
            } // end catch
        } while (!valid);

        equipList.add(new Equipment(name, description, equipmentSize));
    }//GEN-LAST:event_equipMenuItemAddActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        memFees memfeeForm = new memFees();
        memfeeForm.setVisible(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(gymManagementSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(gymManagementSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(gymManagementSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(gymManagementSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new gymManagementSystem().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem EquipMenuItemSearch;
    private javax.swing.JMenu classMenu;
    private javax.swing.JMenuItem classMenuItemAdd;
    private javax.swing.JMenuItem classMenuItemDispAll;
    private javax.swing.JMenuItem empExit;
    private javax.swing.JMenu empMenu;
    private javax.swing.JMenuItem empMenuItemAdd;
    private javax.swing.JMenuItem empMenuItemDispAll;
    private javax.swing.JMenuItem empMenuItemRemove;
    private javax.swing.JMenuItem empMenuItemSearch;
    private javax.swing.JMenuItem empMenuItemSort;
    private javax.swing.JPopupMenu.Separator empSep;
    private javax.swing.JMenuItem equipExit;
    private javax.swing.JMenu equipMenu;
    private javax.swing.JMenuItem equipMenuItemAdd;
    private javax.swing.JMenuItem equipMenuItemDispAll;
    private javax.swing.JMenuItem equipMenuItemRemove;
    private javax.swing.JPopupMenu.Separator equipSort;
    private javax.swing.JMenuItem fcExit;
    private javax.swing.JMenu fcMenu;
    private javax.swing.JMenuItem fcMenuItemAdd;
    private javax.swing.JMenuItem fcMenuItemDispAll;
    private javax.swing.JMenuItem fcMenuItemRemove;
    private javax.swing.JMenuItem fcMenuItemSearch;
    private javax.swing.JPopupMenu.Separator fcSep;
    private javax.swing.JMenuItem fileExit;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem fileMenuItemLAD;
    private javax.swing.JMenuItem fileMenuItemSAD;
    private javax.swing.JPopupMenu.Separator fileSep;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem memExit;
    private javax.swing.JMenu memMenu;
    private javax.swing.JMenuItem memMenuItemAdd;
    private javax.swing.JMenuItem memMenuItemDispAll;
    private javax.swing.JMenuItem memMenuItemRemove;
    private javax.swing.JMenuItem memMenuItemSearch;
    private javax.swing.JMenuItem memMenuItemSort;
    private javax.swing.JPopupMenu.Separator memSep;
    // End of variables declaration//GEN-END:variables
}
